import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const { messages, model = "deepseek/deepseek-chat-v3-0324:free" } = await req.json();

  const isFirstInteraction = messages.length === 1 && messages[0].role === "assistant";

  if (isFirstInteraction) {
    return NextResponse.json({
      choices: [
        {
          message: {
            role: "assistant",
            content:
              "Ol√°, sou o **Apollo AI**, seu analista institucional para trading e investimentos.\n\nüìå Para come√ßar, por favor, me envie o **contexto completo** que deseja que eu analise. Ex:\n- Estrat√©gia usada (indicadores, entrada/sa√≠da)\n- Dados de performance (lucro, drawdown, winrate)\n- Par de moedas ou ativo analisado\n- Qual seu objetivo com a an√°lise\n\nQuanto mais informa√ß√µes, mais precisa ser√° minha resposta.",
          },
        },
      ],
    });
  }

  const systemPrompt = {
    role: "system",
    content: `
Voc√™ √© Apollo AI, um analista institucional especializado em trading e estrat√©gias automatizadas.

‚ö†Ô∏è Regras fundamentais:
- Voc√™ **n√£o possui acesso √† internet** ou dados em tempo real.
- Suas respostas devem ser **baseadas apenas no contexto fornecido pelo usu√°rio**.
- N√£o invente dados, cota√ß√µes ou eventos que o usu√°rio n√£o mencionou.

üß† Foco:
- Forex, a√ß√µes, √≠ndices, commodities
- Rob√¥s de trading, price action, indicadores t√©cnicos
- M√©tricas como drawdown, lucro l√≠quido, Sharpe, winrate
- Contexto macroecon√¥mico e gest√£o de risco

üéØ Estilo de escrita:
- Profissional, direto e anal√≠tico
- Evite bullets com "*"
- Use negrito para termos t√©cnicos e estrutura l√≥gica com par√°grafos
    `.trim(),
  };

  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model,
      messages: [systemPrompt, ...messages],
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    return NextResponse.json({ error: errorText }, { status: response.status });
  }

  const data = await response.json();
  return NextResponse.json(data);
}
